# include <stdio.h>
# include <stdlib.h>


typedef struct node 
{
    int data ;
    struct node *next;
    struct node *prev;

}NODE,*PNODE,**PPNODE;

void InsertFirst(PPNODE Head ,int no)
{
    PNODE newn = NULL;
    newn = (PNODE)malloc (sizeof(NODE));
    newn -> data = no;
    newn -> next = NULL;
    newn -> prev = NULL;

    if(*Head == NULL)
    {
        *Head = newn;

    }
    else
    {
        newn -> next = *Head;
        (*Head )->prev = newn;
        *Head = newn;
    }
}
void InsertLast(PPNODE Head , int no)
{
    PNODE newn = NULL;
    PNODE temp = *Head;
    newn = (PNODE)malloc (sizeof(NODE));
    newn -> data = no;
    newn -> next = NULL;
    newn -> prev = NULL;

    if(*Head == NULL)
    {
        *Head = newn;

    }
    else
    {
        while(temp->next!=NULL)
        {
            temp = temp -> next;
        }
        temp -> next = newn ;
        newn -> prev = temp ;   
    }
}
void DeleteFirst(PPNODE Head)
{
    if(*Head == NULL)
    {
        return;
    }
    else if((*Head)->next == NULL)
    {
        free(*Head);
        *Head = NULL;
    }
    else
    {
        *Head = (*Head)->next;
        free((*Head)->prev);
        (*Head)->prev = NULL;
    }

}
void DeleteLast(PPNODE Head)
{ 
    PNODE temp = *Head;
 if(*Head == NULL)
    {
        return;
    }
    else if((*Head)->next == NULL)
    {
        free(*Head);
        *Head = NULL;
    }
    else
    { 
        while(temp->next->next!=NULL)
        {
            temp = temp->next;
        }
       free(temp->next);
       temp->next = NULL;
    
       }
    
}
void Display(PNODE Head)
{
    printf("contents of linked list are\n");

    while(Head!=NULL)
{
printf("|%d|->",Head->data);

Head = Head -> next;
}
printf("NULL\n");
}
int Count(PNODE Head)
{  
    int iCnt = 0;
    while(Head!=NULL)
    {   iCnt++;
        Head = Head -> next;

    }
    return iCnt;
}

void InsertAtPos(PPNODE Head , int no ,int iPos)
{
    int iSize = Count(*Head);
    int i = 0;
    PNODE temp = *Head;
    PNODE newn = NULL;
    newn = (PNODE)malloc(sizeof(NODE));
   newn ->data = no;
   newn -> next = NULL;
   newn -> prev = NULL ;
 
 if((iPos<1)||(iPos>iSize+1))
 {
    printf("INVALID POSITION\n");
    return;
 }
 if(iPos==1)
 {
    InsertFirst(Head,no);
 }
 else if(iPos==iSize+1)
 {

InsertLast(Head,no);
 }
 else
{
    for (i=0;i<iPos-1;i++)
    {
        temp = temp->next;
    }
    newn->next = temp->next;
    temp->next->prev = newn;
    temp->next = newn;
    newn->prev = temp;
    

}

}
void DeleteAtPos(PPNODE Head,int iPos)
{
  int iSize = Count(*Head);
 int i = 0;
 PNODE targetednode = NULL;
 PNODE temp = *Head;
  
 if((iPos<1)||(iPos>iSize))
 {
    printf("INVALID POSITION\n");
    return;
 }
 if(iPos==1)
 {
    DeleteFirst(Head);
 }
 else if(iPos==iSize)
 {

DeleteLast(Head);
 }
 else
 {
    for(i=0;i<iPos-1;i++)
    {
        temp = temp->next;
    }
  targetednode = temp->next;
  temp->next = temp->next->next;
  free(targetednode);
  temp->next->prev = temp;
 }

}
int main()
{
PNODE First = NULL;
int iRet =0;

InsertFirst(&First ,121);
InsertFirst(&First ,111);
InsertFirst(&First ,101);
InsertFirst(&First ,51);
InsertFirst(&First ,21);
InsertFirst(&First ,11);

Display(First);
iRet = Count(First);
printf("NUMBER OF LINKED LIST ARE %d:\n",iRet);

InsertLast(&First,151);
Display(First);
iRet = Count(First);
printf("NUMBER OF LINKED LIST ARE %d:\n",iRet);

DeleteFirst(&First);
Display(First);
iRet = Count(First);
printf("NUMBER OF LINKED LIST ARE %d:\n",iRet);

DeleteLast(&First);
Display(First);
iRet = Count(First);
printf("NUMBER OF LINKED LIST ARE %d:\n",iRet);

InsertAtPos(&First,100,3);
Display(First);
iRet = Count(First);
printf("NUMBER OF LINKED LIST ARE %d:\n",iRet);

DeleteAtPos(&First,3);
Display(First);
iRet = Count(First);
printf("NUMBER OF LINKED LIST ARE %d:\n",iRet);
  return 0;
}
